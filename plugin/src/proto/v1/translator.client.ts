// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "proto/v1/translator.proto" (package "translator", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TranslatorService } from "./translator";
import type { HealthCheckResponse } from "./translator";
import type { HealthCheckRequest } from "./translator";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { TranslatorResponse } from "./translator";
import type { TranslatorRequest } from "./translator";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service translator.TranslatorService
 */
export interface ITranslatorServiceClient {
    /**
     * @generated from protobuf rpc: Translator(stream translator.TranslatorRequest) returns (stream translator.TranslatorResponse);
     */
    translator(options?: RpcOptions): DuplexStreamingCall<TranslatorRequest, TranslatorResponse>;
    /**
     * @generated from protobuf rpc: HealthCheck(translator.HealthCheckRequest) returns (translator.HealthCheckResponse);
     */
    healthCheck(input: HealthCheckRequest, options?: RpcOptions): UnaryCall<HealthCheckRequest, HealthCheckResponse>;
}
/**
 * @generated from protobuf service translator.TranslatorService
 */
export class TranslatorServiceClient implements ITranslatorServiceClient, ServiceInfo {
    typeName = TranslatorService.typeName;
    methods = TranslatorService.methods;
    options = TranslatorService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Translator(stream translator.TranslatorRequest) returns (stream translator.TranslatorResponse);
     */
    translator(options?: RpcOptions): DuplexStreamingCall<TranslatorRequest, TranslatorResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<TranslatorRequest, TranslatorResponse>("duplex", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: HealthCheck(translator.HealthCheckRequest) returns (translator.HealthCheckResponse);
     */
    healthCheck(input: HealthCheckRequest, options?: RpcOptions): UnaryCall<HealthCheckRequest, HealthCheckResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<HealthCheckRequest, HealthCheckResponse>("unary", this._transport, method, opt, input);
    }
}
