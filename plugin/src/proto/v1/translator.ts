// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "proto/v1/translator.proto" (package "translator", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message translator.TranslatorRequest
 */
export interface TranslatorRequest {
    /**
     * @generated from protobuf field: int64 num = 1;
     */
    num: bigint;
}
/**
 * @generated from protobuf message translator.TranslatorResponse
 */
export interface TranslatorResponse {
    /**
     * @generated from protobuf field: double ans = 1;
     */
    ans: number;
}
/**
 * @generated from protobuf message translator.HealthCheckResponse
 */
export interface HealthCheckResponse {
    /**
     * @generated from protobuf field: string health = 1;
     */
    health: string;
}
/**
 * @generated from protobuf message translator.HealthCheckRequest
 */
export interface HealthCheckRequest {
}
// @generated message type with reflection information, may provide speed optimized methods
class TranslatorRequest$Type extends MessageType<TranslatorRequest> {
    constructor() {
        super("translator.TranslatorRequest", [
            { no: 1, name: "num", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<TranslatorRequest>): TranslatorRequest {
        const message = { num: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TranslatorRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TranslatorRequest): TranslatorRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 num */ 1:
                    message.num = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TranslatorRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 num = 1; */
        if (message.num !== 0n)
            writer.tag(1, WireType.Varint).int64(message.num);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message translator.TranslatorRequest
 */
export const TranslatorRequest = new TranslatorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TranslatorResponse$Type extends MessageType<TranslatorResponse> {
    constructor() {
        super("translator.TranslatorResponse", [
            { no: 1, name: "ans", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<TranslatorResponse>): TranslatorResponse {
        const message = { ans: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TranslatorResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TranslatorResponse): TranslatorResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double ans */ 1:
                    message.ans = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TranslatorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double ans = 1; */
        if (message.ans !== 0)
            writer.tag(1, WireType.Bit64).double(message.ans);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message translator.TranslatorResponse
 */
export const TranslatorResponse = new TranslatorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HealthCheckResponse$Type extends MessageType<HealthCheckResponse> {
    constructor() {
        super("translator.HealthCheckResponse", [
            { no: 1, name: "health", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HealthCheckResponse>): HealthCheckResponse {
        const message = { health: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HealthCheckResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HealthCheckResponse): HealthCheckResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string health */ 1:
                    message.health = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HealthCheckResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string health = 1; */
        if (message.health !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.health);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message translator.HealthCheckResponse
 */
export const HealthCheckResponse = new HealthCheckResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HealthCheckRequest$Type extends MessageType<HealthCheckRequest> {
    constructor() {
        super("translator.HealthCheckRequest", []);
    }
    create(value?: PartialMessage<HealthCheckRequest>): HealthCheckRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HealthCheckRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HealthCheckRequest): HealthCheckRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: HealthCheckRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message translator.HealthCheckRequest
 */
export const HealthCheckRequest = new HealthCheckRequest$Type();
/**
 * @generated ServiceType for protobuf service translator.TranslatorService
 */
export const TranslatorService = new ServiceType("translator.TranslatorService", [
    { name: "Translator", serverStreaming: true, clientStreaming: true, options: {}, I: TranslatorRequest, O: TranslatorResponse },
    { name: "HealthCheck", options: {}, I: HealthCheckRequest, O: HealthCheckResponse }
]);
