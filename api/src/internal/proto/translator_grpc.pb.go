// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: translator.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TranslatorService_Translator_FullMethodName              = "/translator.TranslatorService/Translator"
	TranslatorService_HealthCheck_FullMethodName             = "/translator.TranslatorService/HealthCheck"
	TranslatorService_HealthCheckServerStream_FullMethodName = "/translator.TranslatorService/HealthCheckServerStream"
	TranslatorService_HealthCheckClientStream_FullMethodName = "/translator.TranslatorService/HealthCheckClientStream"
	TranslatorService_HealthCheckBiDiStream_FullMethodName   = "/translator.TranslatorService/HealthCheckBiDiStream"
)

// TranslatorServiceClient is the client API for TranslatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TranslatorServiceClient interface {
	Translator(ctx context.Context, opts ...grpc.CallOption) (TranslatorService_TranslatorClient, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	HealthCheckServerStream(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (TranslatorService_HealthCheckServerStreamClient, error)
	HealthCheckClientStream(ctx context.Context, opts ...grpc.CallOption) (TranslatorService_HealthCheckClientStreamClient, error)
	HealthCheckBiDiStream(ctx context.Context, opts ...grpc.CallOption) (TranslatorService_HealthCheckBiDiStreamClient, error)
}

type translatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTranslatorServiceClient(cc grpc.ClientConnInterface) TranslatorServiceClient {
	return &translatorServiceClient{cc}
}

func (c *translatorServiceClient) Translator(ctx context.Context, opts ...grpc.CallOption) (TranslatorService_TranslatorClient, error) {
	stream, err := c.cc.NewStream(ctx, &TranslatorService_ServiceDesc.Streams[0], TranslatorService_Translator_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &translatorServiceTranslatorClient{stream}
	return x, nil
}

type TranslatorService_TranslatorClient interface {
	Send(*TranslatorRequest) error
	Recv() (*TranslatorResponse, error)
	grpc.ClientStream
}

type translatorServiceTranslatorClient struct {
	grpc.ClientStream
}

func (x *translatorServiceTranslatorClient) Send(m *TranslatorRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *translatorServiceTranslatorClient) Recv() (*TranslatorResponse, error) {
	m := new(TranslatorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *translatorServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, TranslatorService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translatorServiceClient) HealthCheckServerStream(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (TranslatorService_HealthCheckServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TranslatorService_ServiceDesc.Streams[1], TranslatorService_HealthCheckServerStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &translatorServiceHealthCheckServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TranslatorService_HealthCheckServerStreamClient interface {
	Recv() (*HealthCheckResponse, error)
	grpc.ClientStream
}

type translatorServiceHealthCheckServerStreamClient struct {
	grpc.ClientStream
}

func (x *translatorServiceHealthCheckServerStreamClient) Recv() (*HealthCheckResponse, error) {
	m := new(HealthCheckResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *translatorServiceClient) HealthCheckClientStream(ctx context.Context, opts ...grpc.CallOption) (TranslatorService_HealthCheckClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TranslatorService_ServiceDesc.Streams[2], TranslatorService_HealthCheckClientStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &translatorServiceHealthCheckClientStreamClient{stream}
	return x, nil
}

type TranslatorService_HealthCheckClientStreamClient interface {
	Send(*HealthCheckRequest) error
	CloseAndRecv() (*HealthCheckResponse, error)
	grpc.ClientStream
}

type translatorServiceHealthCheckClientStreamClient struct {
	grpc.ClientStream
}

func (x *translatorServiceHealthCheckClientStreamClient) Send(m *HealthCheckRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *translatorServiceHealthCheckClientStreamClient) CloseAndRecv() (*HealthCheckResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HealthCheckResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *translatorServiceClient) HealthCheckBiDiStream(ctx context.Context, opts ...grpc.CallOption) (TranslatorService_HealthCheckBiDiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TranslatorService_ServiceDesc.Streams[3], TranslatorService_HealthCheckBiDiStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &translatorServiceHealthCheckBiDiStreamClient{stream}
	return x, nil
}

type TranslatorService_HealthCheckBiDiStreamClient interface {
	Send(*HealthCheckRequest) error
	Recv() (*HealthCheckResponse, error)
	grpc.ClientStream
}

type translatorServiceHealthCheckBiDiStreamClient struct {
	grpc.ClientStream
}

func (x *translatorServiceHealthCheckBiDiStreamClient) Send(m *HealthCheckRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *translatorServiceHealthCheckBiDiStreamClient) Recv() (*HealthCheckResponse, error) {
	m := new(HealthCheckResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TranslatorServiceServer is the server API for TranslatorService service.
// All implementations must embed UnimplementedTranslatorServiceServer
// for forward compatibility
type TranslatorServiceServer interface {
	Translator(TranslatorService_TranslatorServer) error
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	HealthCheckServerStream(*HealthCheckRequest, TranslatorService_HealthCheckServerStreamServer) error
	HealthCheckClientStream(TranslatorService_HealthCheckClientStreamServer) error
	HealthCheckBiDiStream(TranslatorService_HealthCheckBiDiStreamServer) error
	mustEmbedUnimplementedTranslatorServiceServer()
}

// UnimplementedTranslatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTranslatorServiceServer struct {
}

func (UnimplementedTranslatorServiceServer) Translator(TranslatorService_TranslatorServer) error {
	return status.Errorf(codes.Unimplemented, "method Translator not implemented")
}
func (UnimplementedTranslatorServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedTranslatorServiceServer) HealthCheckServerStream(*HealthCheckRequest, TranslatorService_HealthCheckServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HealthCheckServerStream not implemented")
}
func (UnimplementedTranslatorServiceServer) HealthCheckClientStream(TranslatorService_HealthCheckClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HealthCheckClientStream not implemented")
}
func (UnimplementedTranslatorServiceServer) HealthCheckBiDiStream(TranslatorService_HealthCheckBiDiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HealthCheckBiDiStream not implemented")
}
func (UnimplementedTranslatorServiceServer) mustEmbedUnimplementedTranslatorServiceServer() {}

// UnsafeTranslatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TranslatorServiceServer will
// result in compilation errors.
type UnsafeTranslatorServiceServer interface {
	mustEmbedUnimplementedTranslatorServiceServer()
}

func RegisterTranslatorServiceServer(s grpc.ServiceRegistrar, srv TranslatorServiceServer) {
	s.RegisterService(&TranslatorService_ServiceDesc, srv)
}

func _TranslatorService_Translator_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TranslatorServiceServer).Translator(&translatorServiceTranslatorServer{stream})
}

type TranslatorService_TranslatorServer interface {
	Send(*TranslatorResponse) error
	Recv() (*TranslatorRequest, error)
	grpc.ServerStream
}

type translatorServiceTranslatorServer struct {
	grpc.ServerStream
}

func (x *translatorServiceTranslatorServer) Send(m *TranslatorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *translatorServiceTranslatorServer) Recv() (*TranslatorRequest, error) {
	m := new(TranslatorRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TranslatorService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslatorServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranslatorService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslatorServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranslatorService_HealthCheckServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HealthCheckRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TranslatorServiceServer).HealthCheckServerStream(m, &translatorServiceHealthCheckServerStreamServer{stream})
}

type TranslatorService_HealthCheckServerStreamServer interface {
	Send(*HealthCheckResponse) error
	grpc.ServerStream
}

type translatorServiceHealthCheckServerStreamServer struct {
	grpc.ServerStream
}

func (x *translatorServiceHealthCheckServerStreamServer) Send(m *HealthCheckResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TranslatorService_HealthCheckClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TranslatorServiceServer).HealthCheckClientStream(&translatorServiceHealthCheckClientStreamServer{stream})
}

type TranslatorService_HealthCheckClientStreamServer interface {
	SendAndClose(*HealthCheckResponse) error
	Recv() (*HealthCheckRequest, error)
	grpc.ServerStream
}

type translatorServiceHealthCheckClientStreamServer struct {
	grpc.ServerStream
}

func (x *translatorServiceHealthCheckClientStreamServer) SendAndClose(m *HealthCheckResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *translatorServiceHealthCheckClientStreamServer) Recv() (*HealthCheckRequest, error) {
	m := new(HealthCheckRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TranslatorService_HealthCheckBiDiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TranslatorServiceServer).HealthCheckBiDiStream(&translatorServiceHealthCheckBiDiStreamServer{stream})
}

type TranslatorService_HealthCheckBiDiStreamServer interface {
	Send(*HealthCheckResponse) error
	Recv() (*HealthCheckRequest, error)
	grpc.ServerStream
}

type translatorServiceHealthCheckBiDiStreamServer struct {
	grpc.ServerStream
}

func (x *translatorServiceHealthCheckBiDiStreamServer) Send(m *HealthCheckResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *translatorServiceHealthCheckBiDiStreamServer) Recv() (*HealthCheckRequest, error) {
	m := new(HealthCheckRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TranslatorService_ServiceDesc is the grpc.ServiceDesc for TranslatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TranslatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "translator.TranslatorService",
	HandlerType: (*TranslatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _TranslatorService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Translator",
			Handler:       _TranslatorService_Translator_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "HealthCheckServerStream",
			Handler:       _TranslatorService_HealthCheckServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "HealthCheckClientStream",
			Handler:       _TranslatorService_HealthCheckClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "HealthCheckBiDiStream",
			Handler:       _TranslatorService_HealthCheckBiDiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "translator.proto",
}
